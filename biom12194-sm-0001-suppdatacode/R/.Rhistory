control=list(dRange=range(dateRange),
anim.dRange=range(scoreRange),
plot.dRange=as.Date(c("2011-05-07","2011-07-04")),
consistent=FALSE,hookFun=function(range, ymax) {},
sys.sleep=0,
safeguard=safePredictLag,cex.names=0.7))
dev.off()
### functions to generate simulation data
# Parameters:
#  n - number of samples
#  alpha - alpha
#  beta - beta
###
simsDataGen <- function(alpha =  c(1:10, seq(10, 120, by = 4), seq(120, 3, by = -6) ), beta = 0.5,
days = 30, D = 15, seed = 111, p = NULL){
if(length(alpha) < days){
stop("Error! The length of alpha cannot be less than days!")
}
set.seed(seed)
# Generate the probability of case being reported at a certain day
# p <- rGeneralizedDirichlet(1, gd_alpha, gd_beta)
# Cut the probability according to the Maximal delay that we concern
p_cut <- p[, c(1:(D+1))]
# Initialize storage for true cases and reported cases
true_cases <- numeric(days)  # Actual number of cases per day
reported_cases <- matrix(0, nrow = days, ncol = D + 1)  # Reported cases matrix for delays 0 to D days
# Simulate the true number of cases per day
for (t in 1:days) {
# Draw the Poisson intensity parameter lambda_t from a Gamma distribution
lambda_t <- rgamma(1, shape = alpha[t], rate = beta)
# Draw the actual number of cases N(t, âˆž) from a Poisson distribution
true_cases[t] <- rpois(1, lambda = lambda_t)
}
# REPORTED CASES
N_tT <- matrix(0, ncol = D+1, nrow = days)
if(nrow(p) == 1){
for (i in 1:days) {
N_tT[i,] = rmultinom(1, size = true_cases[i], prob = p_cut)
}
}else{
for (i in 1:days) {
N_tT[i,] = rmultinom(1, size = true_cases[i], prob = p_cut[i,])
}
}
return(N_tT)
}
#p1
data1 <- simsDataGen(p = p1, days = 58)
husO104Hosp <- dataTransform(data1)
#Fix maximum delay
D <- 15
#Extract the reporting triangle at a specific day
t.repTriangle <- as.Date("2011-07-04")
nc <- nowcast(now=t.repTriangle,when=t.repTriangle,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,method="lawless")
#Show the reporting triangle (this is Fig. 1 from the Web Appendix)
plotReportingTriangle(nc)
#Extract it manually and show last 20 days of the outbreak
tail(reportingTriangle(nc),n=20)
#Extract aggregates from reporting triangle
n.x <- matrix(attr(reportingTriangle(nc),"n.x"),ncol=1)
N.x <- matrix(attr(reportingTriangle(nc),"N.x"),ncol=1)
#Compute MLEs of reverse time hazards
g.hat <- ifelse( !is.na(n.x/N.x), n.x/N.x, 0)
#Computing resulting probabilities
pd <- g.hat[(0:D)+1] * c(sapply(0:(D-1), function(d) prod(1-g.hat[(d+1):D+1])),1)
#Make a table with the numbers (corresponds to Tab. 1 in the Web Appendix)
data.frame(n.x=n.x,N.x,g.hat=g.hat,pd=pd,row.names=as.character(0:D))
#Setup the data
now <- as.Date("2011-07-02")
when <- as.Date("2011-05-28")
#Dates where the corresponding sts object should be available
dateRange <- seq(as.Date("2011-05-01"),as.Date("2011-07-06"),by="1 day")
#Setup up the control object for the different nowcast procedures
nc.control <- list(predPMF  =TRUE,  #compute and store the predictive PMF for each time point and method
N.tInf.max=300,  #Support of each N.tInf is 0,\ldots,N.tInf.max
score=TRUE,      #Compute scoring rules for each predictive PMF (FALSE is faster)
dRange=dateRange,#Dates which constitutes time points 1,...,length(dateRange)
#Specification of the hierarchical Bayes model
ddcp=list(ddChangepoint=as.Date(c("2011-05-23")),
logLambda="tps",
tau.gamma=1,
mcmc=c(burnin=1000,sample=10000,thin=1)),
#Specification for bayes.notrunc and bayes.trunc (especially prior)
N.tInf.prior=structure("poisgamma",mean.lambda=50,var.lambda=3000))
#Nowcast using a set of methods (no moving window)
nc2 <- nowcast(now=now,when=when,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,
D=D,m=NULL,
# method=c("lawless","bayes.notrunc","bayes.trunc","bayes.trunc.ddcp"),
method=c("bayes.trunc"),
control=nc.control)
#Which method to use, could e.g. also be "bayes.trunc.ddcp" (which is much slower!)
method <- "bayes.trunc"
#Number of nowcasts to do back in time
k <- 10
#First safe time point back in time to do nowcasting for
safePredictLag <- 3
#Range of values to do the scoring for.
scoreRange <- seq(as.Date("2011-05-20"),as.Date("2011-06-20"),by="1 day")
nowcastList <- list()
#Nowcast all time point within the specified range. This might take a while (!)
for (i in 1:length(scoreRange)) {
#What's "today"
now <- scoreRange[i]
#Show some status information
cat(paste("====================\nnow=",now," (",i,"/",length(scoreRange),")\n====================\n",sep=""))
#Which time points to do the nowcast for
when <- seq(now-k-safePredictLag+1, now-safePredictLag, by="1 day")
#Nowcast
nc.one <- nowcast(now=now,when=when,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,m=NULL,method=method,control=nc.control)
nowcastList[as.character(now)] <- nc.one
}
#Make an animation similar to Web Animation 3 of the manuscript.
#Other output options (html or shockwave movie are possible using the 'animation' package)
getwd()  #Show current working directory (has to be a writeable directory)
fileName <- "NowcastAnimation.pdf" #File name, which will be stored in the current directory
pdf(fileName,width=8,height=5,onefile=TRUE)
animate.nowcast(linelist=husO104Hosp,
dEventCol="dHosp",dReportCol="dReport",
aggregate.by="1 day",
nowcasts=nowcastList,
method=method,
control=list(dRange=range(dateRange),
anim.dRange=range(scoreRange),
plot.dRange=as.Date(c("2011-05-07","2011-07-04")),
consistent=FALSE,hookFun=function(range, ymax) {},
sys.sleep=0,
safeguard=safePredictLag,cex.names=0.7))
dev.off()
#p2
data2 <- simsDataGen(p = p2, days = 58)
husO104Hosp <- dataTransform(data2)
#Fix maximum delay
D <- 15
#Extract the reporting triangle at a specific day
t.repTriangle <- as.Date("2011-07-04")
nc <- nowcast(now=t.repTriangle,when=t.repTriangle,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,method="lawless")
#Show the reporting triangle (this is Fig. 1 from the Web Appendix)
plotReportingTriangle(nc)
#Extract it manually and show last 20 days of the outbreak
tail(reportingTriangle(nc),n=20)
#Extract aggregates from reporting triangle
n.x <- matrix(attr(reportingTriangle(nc),"n.x"),ncol=1)
N.x <- matrix(attr(reportingTriangle(nc),"N.x"),ncol=1)
#Compute MLEs of reverse time hazards
g.hat <- ifelse( !is.na(n.x/N.x), n.x/N.x, 0)
#Computing resulting probabilities
pd <- g.hat[(0:D)+1] * c(sapply(0:(D-1), function(d) prod(1-g.hat[(d+1):D+1])),1)
#Make a table with the numbers (corresponds to Tab. 1 in the Web Appendix)
data.frame(n.x=n.x,N.x,g.hat=g.hat,pd=pd,row.names=as.character(0:D))
#Setup the data
now <- as.Date("2011-07-02")
when <- as.Date("2011-05-28")
#Dates where the corresponding sts object should be available
dateRange <- seq(as.Date("2011-05-01"),as.Date("2011-07-06"),by="1 day")
#Setup up the control object for the different nowcast procedures
nc.control <- list(predPMF  =TRUE,  #compute and store the predictive PMF for each time point and method
N.tInf.max=300,  #Support of each N.tInf is 0,\ldots,N.tInf.max
score=TRUE,      #Compute scoring rules for each predictive PMF (FALSE is faster)
dRange=dateRange,#Dates which constitutes time points 1,...,length(dateRange)
#Specification of the hierarchical Bayes model
ddcp=list(ddChangepoint=as.Date(c("2011-05-23")),
logLambda="tps",
tau.gamma=1,
mcmc=c(burnin=1000,sample=10000,thin=1)),
#Specification for bayes.notrunc and bayes.trunc (especially prior)
N.tInf.prior=structure("poisgamma",mean.lambda=50,var.lambda=3000))
#Nowcast using a set of methods (no moving window)
nc2 <- nowcast(now=now,when=when,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,
D=D,m=NULL,
# method=c("lawless","bayes.notrunc","bayes.trunc","bayes.trunc.ddcp"),
method=c("bayes.trunc"),
control=nc.control)
#Which method to use, could e.g. also be "bayes.trunc.ddcp" (which is much slower!)
method <- "bayes.trunc"
#Number of nowcasts to do back in time
k <- 10
#First safe time point back in time to do nowcasting for
safePredictLag <- 3
#Range of values to do the scoring for.
scoreRange <- seq(as.Date("2011-05-20"),as.Date("2011-06-20"),by="1 day")
nowcastList <- list()
#Nowcast all time point within the specified range. This might take a while (!)
for (i in 1:length(scoreRange)) {
#What's "today"
now <- scoreRange[i]
#Show some status information
cat(paste("====================\nnow=",now," (",i,"/",length(scoreRange),")\n====================\n",sep=""))
#Which time points to do the nowcast for
when <- seq(now-k-safePredictLag+1, now-safePredictLag, by="1 day")
#Nowcast
nc.one <- nowcast(now=now,when=when,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,m=NULL,method=method,control=nc.control)
nowcastList[as.character(now)] <- nc.one
}
#Make an animation similar to Web Animation 3 of the manuscript.
#Other output options (html or shockwave movie are possible using the 'animation' package)
getwd()  #Show current working directory (has to be a writeable directory)
#Make an animation similar to Web Animation 3 of the manuscript.
#Other output options (html or shockwave movie are possible using the 'animation' package)
getwd()  #Show current working directory (has to be a writeable directory)
fileName <- "NowcastAnimation.pdf" #File name, which will be stored in the current directory
pdf(fileName,width=8,height=5,onefile=TRUE)
animate.nowcast(linelist=husO104Hosp,
dEventCol="dHosp",dReportCol="dReport",
aggregate.by="1 day",
nowcasts=nowcastList,
method=method,
control=list(dRange=range(dateRange),
anim.dRange=range(scoreRange),
plot.dRange=as.Date(c("2011-05-07","2011-07-04")),
consistent=FALSE,hookFun=function(range, ymax) {},
sys.sleep=0,
safeguard=safePredictLag,cex.names=0.7))
dev.off()
#p3
data3 <- simsDataGen(p = p3, days = 58)
husO104Hosp <- dataTransform(data3)
#Fix maximum delay
D <- 15
#Extract the reporting triangle at a specific day
t.repTriangle <- as.Date("2011-07-04")
nc <- nowcast(now=t.repTriangle,when=t.repTriangle,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,method="lawless")
#Show the reporting triangle (this is Fig. 1 from the Web Appendix)
plotReportingTriangle(nc)
#Extract it manually and show last 20 days of the outbreak
tail(reportingTriangle(nc),n=20)
#Extract aggregates from reporting triangle
n.x <- matrix(attr(reportingTriangle(nc),"n.x"),ncol=1)
N.x <- matrix(attr(reportingTriangle(nc),"N.x"),ncol=1)
#Compute MLEs of reverse time hazards
g.hat <- ifelse( !is.na(n.x/N.x), n.x/N.x, 0)
#Computing resulting probabilities
pd <- g.hat[(0:D)+1] * c(sapply(0:(D-1), function(d) prod(1-g.hat[(d+1):D+1])),1)
#Make a table with the numbers (corresponds to Tab. 1 in the Web Appendix)
data.frame(n.x=n.x,N.x,g.hat=g.hat,pd=pd,row.names=as.character(0:D))
#Setup the data
now <- as.Date("2011-07-02")
when <- as.Date("2011-05-28")
#Dates where the corresponding sts object should be available
dateRange <- seq(as.Date("2011-05-01"),as.Date("2011-07-06"),by="1 day")
#Setup up the control object for the different nowcast procedures
nc.control <- list(predPMF  =TRUE,  #compute and store the predictive PMF for each time point and method
N.tInf.max=300,  #Support of each N.tInf is 0,\ldots,N.tInf.max
score=TRUE,      #Compute scoring rules for each predictive PMF (FALSE is faster)
dRange=dateRange,#Dates which constitutes time points 1,...,length(dateRange)
#Specification of the hierarchical Bayes model
ddcp=list(ddChangepoint=as.Date(c("2011-05-23")),
logLambda="tps",
tau.gamma=1,
mcmc=c(burnin=1000,sample=10000,thin=1)),
#Specification for bayes.notrunc and bayes.trunc (especially prior)
N.tInf.prior=structure("poisgamma",mean.lambda=50,var.lambda=3000))
#Nowcast using a set of methods (no moving window)
nc2 <- nowcast(now=now,when=when,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,
D=D,m=NULL,
# method=c("lawless","bayes.notrunc","bayes.trunc","bayes.trunc.ddcp"),
method=c("bayes.trunc"),
control=nc.control)
#Which method to use, could e.g. also be "bayes.trunc.ddcp" (which is much slower!)
method <- "bayes.trunc"
#Number of nowcasts to do back in time
k <- 10
#First safe time point back in time to do nowcasting for
safePredictLag <- 3
#Range of values to do the scoring for.
scoreRange <- seq(as.Date("2011-05-20"),as.Date("2011-06-20"),by="1 day")
nowcastList <- list()
#Nowcast all time point within the specified range. This might take a while (!)
for (i in 1:length(scoreRange)) {
#What's "today"
now <- scoreRange[i]
#Show some status information
cat(paste("====================\nnow=",now," (",i,"/",length(scoreRange),")\n====================\n",sep=""))
#Which time points to do the nowcast for
when <- seq(now-k-safePredictLag+1, now-safePredictLag, by="1 day")
#Nowcast
nc.one <- nowcast(now=now,when=when,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,m=NULL,method=method,control=nc.control)
nowcastList[as.character(now)] <- nc.one
}
#Make an animation similar to Web Animation 3 of the manuscript.
#Other output options (html or shockwave movie are possible using the 'animation' package)
getwd()  #Show current working directory (has to be a writeable directory)
#Make an animation similar to Web Animation 3 of the manuscript.
#Other output options (html or shockwave movie are possible using the 'animation' package)
getwd()  #Show current working directory (has to be a writeable directory)
fileName <- "NowcastAnimation.pdf" #File name, which will be stored in the current directory
pdf(fileName,width=8,height=5,onefile=TRUE)
animate.nowcast(linelist=husO104Hosp,
dEventCol="dHosp",dReportCol="dReport",
aggregate.by="1 day",
nowcasts=nowcastList,
method=method,
control=list(dRange=range(dateRange),
anim.dRange=range(scoreRange),
plot.dRange=as.Date(c("2011-05-07","2011-07-04")),
consistent=FALSE,hookFun=function(range, ymax) {},
sys.sleep=0,
safeguard=safePredictLag,cex.names=0.7))
dev.off()
### functions to generate simulation data
# Parameters:
#  n - number of samples
#  alpha - alpha
#  beta - beta
###
simsDataGen <- function(alpha =  c(1:10, seq(10, 120, by = 4), seq(120, 3, by = -6) ), beta = 0.5,
days = 30, D = 15, seed = 123, p = NULL){
if(length(alpha) < days){
stop("Error! The length of alpha cannot be less than days!")
}
set.seed(seed)
# Generate the probability of case being reported at a certain day
# p <- rGeneralizedDirichlet(1, gd_alpha, gd_beta)
# Cut the probability according to the Maximal delay that we concern
p_cut <- p[, c(1:(D+1))]
# Initialize storage for true cases and reported cases
true_cases <- numeric(days)  # Actual number of cases per day
reported_cases <- matrix(0, nrow = days, ncol = D + 1)  # Reported cases matrix for delays 0 to D days
# Simulate the true number of cases per day
for (t in 1:days) {
# Draw the Poisson intensity parameter lambda_t from a Gamma distribution
lambda_t <- rgamma(1, shape = alpha[t], rate = beta)
# Draw the actual number of cases N(t, âˆž) from a Poisson distribution
true_cases[t] <- rpois(1, lambda = lambda_t)
}
# REPORTED CASES
N_tT <- matrix(0, ncol = D+1, nrow = days)
if(nrow(p) == 1){
for (i in 1:days) {
N_tT[i,] = rmultinom(1, size = true_cases[i], prob = p_cut)
}
}else{
for (i in 1:days) {
N_tT[i,] = rmultinom(1, size = true_cases[i], prob = p_cut[i,])
}
}
return(N_tT)
}
#p3
data3 <- simsDataGen(p = p3, days = 58)
husO104Hosp <- dataTransform(data3)
#Fix maximum delay
D <- 15
#Extract the reporting triangle at a specific day
t.repTriangle <- as.Date("2011-07-04")
nc <- nowcast(now=t.repTriangle,when=t.repTriangle,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,method="lawless")
#Show the reporting triangle (this is Fig. 1 from the Web Appendix)
plotReportingTriangle(nc)
#Extract it manually and show last 20 days of the outbreak
tail(reportingTriangle(nc),n=20)
#Extract aggregates from reporting triangle
n.x <- matrix(attr(reportingTriangle(nc),"n.x"),ncol=1)
N.x <- matrix(attr(reportingTriangle(nc),"N.x"),ncol=1)
#Compute MLEs of reverse time hazards
g.hat <- ifelse( !is.na(n.x/N.x), n.x/N.x, 0)
#Computing resulting probabilities
pd <- g.hat[(0:D)+1] * c(sapply(0:(D-1), function(d) prod(1-g.hat[(d+1):D+1])),1)
#Make a table with the numbers (corresponds to Tab. 1 in the Web Appendix)
data.frame(n.x=n.x,N.x,g.hat=g.hat,pd=pd,row.names=as.character(0:D))
#Setup the data
now <- as.Date("2011-07-02")
when <- as.Date("2011-05-28")
#Dates where the corresponding sts object should be available
dateRange <- seq(as.Date("2011-05-01"),as.Date("2011-07-06"),by="1 day")
#Setup up the control object for the different nowcast procedures
nc.control <- list(predPMF  =TRUE,  #compute and store the predictive PMF for each time point and method
N.tInf.max=300,  #Support of each N.tInf is 0,\ldots,N.tInf.max
score=TRUE,      #Compute scoring rules for each predictive PMF (FALSE is faster)
dRange=dateRange,#Dates which constitutes time points 1,...,length(dateRange)
#Specification of the hierarchical Bayes model
ddcp=list(ddChangepoint=as.Date(c("2011-05-23")),
logLambda="tps",
tau.gamma=1,
mcmc=c(burnin=1000,sample=10000,thin=1)),
#Specification for bayes.notrunc and bayes.trunc (especially prior)
N.tInf.prior=structure("poisgamma",mean.lambda=50,var.lambda=3000))
#Which method to use, could e.g. also be "bayes.trunc.ddcp" (which is much slower!)
method <- "bayes.trunc"
#Number of nowcasts to do back in time
k <- 10
#First safe time point back in time to do nowcasting for
safePredictLag <- 3
#Range of values to do the scoring for.
scoreRange <- seq(as.Date("2011-05-20"),as.Date("2011-06-20"),by="1 day")
nowcastList <- list()
#Nowcast all time point within the specified range. This might take a while (!)
for (i in 1:length(scoreRange)) {
#What's "today"
now <- scoreRange[i]
#Show some status information
cat(paste("====================\nnow=",now," (",i,"/",length(scoreRange),")\n====================\n",sep=""))
#Which time points to do the nowcast for
when <- seq(now-k-safePredictLag+1, now-safePredictLag, by="1 day")
#Nowcast
nc.one <- nowcast(now=now,when=when,dEventCol="dHosp",dReportCol="dReport",data=husO104Hosp,D=D,m=NULL,method=method,control=nc.control)
nowcastList[as.character(now)] <- nc.one
}
#Make an animation similar to Web Animation 3 of the manuscript.
#Other output options (html or shockwave movie are possible using the 'animation' package)
getwd()  #Show current working directory (has to be a writeable directory)
fileName <- "NowcastAnimation.pdf" #File name, which will be stored in the current directory
pdf(fileName,width=8,height=5,onefile=TRUE)
animate.nowcast(linelist=husO104Hosp,
dEventCol="dHosp",dReportCol="dReport",
aggregate.by="1 day",
nowcasts=nowcastList,
method=method,
control=list(dRange=range(dateRange),
anim.dRange=range(scoreRange),
plot.dRange=as.Date(c("2011-05-07","2011-07-04")),
consistent=FALSE,hookFun=function(range, ymax) {},
sys.sleep=0,
safeguard=safePredictLag,cex.names=0.7))
dev.off()
p1
p2
par(mfrow = c(4,5))
for (i in 1:30) {
plot(p3[i,], type = "l")
}
### functions to generate p(delay probability)
# Parameters:
#  n - number of samples
#  alpha - to control the rbeta(). If alpha is large, than the value is large.
#  beta - to control the rbeta(). If beta is large, than the value is large.
###
generate_controlled_sum <- function(n, alpha, beta, order = "increasing") {
# n random numbers
values <- rbeta(n, alpha, beta)
# normalize to  1
normalized_values <- values / sum(values)
# Arrange order
if (order == "increasing") {
normalized_values <- sort(normalized_values)
} else if (order == "decreasing") {
normalized_values <- sort(normalized_values, decreasing = TRUE)
} else if (order == "random") {
normalized_values <- sample(normalized_values)  # Random shuffle for a "wavy" effect
}
return(normalized_values)
}
### functions to generate p(delay probability)
# Parameters:
#  n - number of samples
#  alpha - alpha
#  beta - beta
###
simsP <- function(Type = "GD", gd_alpha = 1:20, gd_beta = 20:1, D = 15, days = 30) {
Type <- match.arg(Type, c("GD", "Multi_GD", "basin"))
if (Type == "GD") {
# fixed prob
p <- rGeneralizedDirichlet(1, gd_alpha, gd_beta)
} else if (Type == "Multi_GD") {
# multi
p <- rGeneralizedDirichlet(days, gd_alpha, gd_beta)
} else {  # Type == "basin"
# spit into three parts
n <- split_into_three(days)
p <- matrix(0, nrow = days, ncol = D + 1)
for (i in 1:days) {
if (i <= n[1]) {
p[i, ] <- generate_controlled_sum(D + 1, alpha = 1, beta = 1000, order = "decreasing")
} else if (i <= (n[1] + n[2])) {
p[i, ] <- generate_controlled_sum(D + 1, alpha = 100, beta = 1)
} else {
p[i, ] <- generate_controlled_sum(D + 1, alpha = 1, beta = 1000, order = "increasing")
}
}
}
return(p)
}
p1 <- simsP(Type = "GD", gd_alpha = 1:20, gd_beta = 20:1, D = 15, days = 58)
p2 <- simsP(Type = "Multi_GD", gd_alpha = 1:20, gd_beta = 20:1, D = 15, days = 58)
p3 <- simsP(Type = "basin", D = 15, days = 58)
par(mfrow = c(4,5))
for (i in 1:30) {
plot(p3[i,], type = "l")
}
#
for (i in 1:30) {
plot(t(apply(p3, 1, cumsum))[i,], type = "l")
}
#
for (i in 1:30) {
plot(t(apply(p3, 1, cumsum))[i,], type = "l")
}
par(mfrow = c(4,5))
#
for (i in 1:30) {
plot(t(apply(p3, 1, cumsum))[i,], type = "l")
}
par(mfrow = c(4,5))
for (i in 1:30) {
plot(p3[i,], type = "l")
}
p1 <- simsP(Type = "GD", gd_alpha = 1:20, gd_beta = 20:1, D = 15, days = 58)
p2 <- simsP(Type = "Multi_GD", gd_alpha = 1:20, gd_beta = 20:1, D = 15, days = 58)
p3 <- simsP(Type = "basin", D = 15, days = 58)
par(mfrow = c(4,5))
for (i in 1:30) {
plot(p3[i,], type = "l")
}
for (i in 1:30) {
plot(t(apply(p3, 1, cumsum))[i,], type = "l")
}
par(mfrow = c(4,5))
for (i in 1:30) {
plot(p3[i,], type = "l")
}
#
for (i in 1:30) {
plot(t(apply(p3, 1, cumsum))[i,], type = "l")
}
